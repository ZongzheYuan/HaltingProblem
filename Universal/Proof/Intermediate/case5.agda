module Universal.Proof.Intermediate.case5 whereopen import Relation.Binary.PropositionalEquality.Coreopen import Data.Vecopen import While.basicopen import While.whileopen import Universal.interpretopen import Universal.universalopen import Universal.Proof.Intermediate.case5_helperabstract  case5 : {Cr E St d₁ C P Pd : D} -> STEP-I ⊢ Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ [] ⇒ (Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ [])  case5 {Cr} {E} {St} {d₁} {C} {P} {Pd} = seq {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                              {env₂ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                              {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          assign                                          (seq {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                               {env₂ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∷ []}                                               {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          assign                                          (seq {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∷ []}                                               {env₂ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∷ []}                                               {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          (whilef tt)                                          (whilet {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∷ []}                                                  {env₂ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                                  {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          tt                                          (seq {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∷ []}                                               {env₂ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                               {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          assign                                          (seq {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                              {env₂ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                              {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          assign                                          (seq {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                               {env₂ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∷ []}                                               {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          assign                                          (seq {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∷ []}                                               {env₂ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∷ []}                                               {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          (whilef tt)                                          (whilet {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∷ []}                                                  {env₂ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                                  {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          tt                                          (seq {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∷ []}                                               {env₂ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                               {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          assign                                          (seq {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                              {env₂ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                              {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          assign                                          (seq {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                               {env₂ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∷ []}                                               {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          assign                                          (seq {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∷ []}                                               {env₂ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∷ []}                                               {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          (whilef tt)                                          (whilet {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∷ []}                                                  {env₂ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                                  {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          tt                                          (seq {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∷ []}                                               {env₂ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                               {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          assign                                          (seq {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                               {env₂ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                               {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          (subst                                             (λ x →                                                (Z := (hd (var Cd) =? dohdE)) ⊢                                                Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ [] ⇒                                                (Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∷ x ∷ []))                                             (lemma {Pd}{P}{C}{E}{Cr}{St}{d₁}) assign)                                          (seq {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                               {env₂ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∷ []}                                               {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          assign                                          (seq {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∷ []}                                               {env₂ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∷ []}                                               {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          (whilef tt)                                          (whilet {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∷ []}                                                  {env₂ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                                  {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          tt                                          (seq {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∷ []}                                               {env₂ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                               {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          assign                                          (seq {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                               {env₂ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∷ dnil ∙ dnil ∷ []}                                               {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          assign                                          (seq {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∷ dnil ∙ dnil ∷ []}                                               {env₂ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∙ dnil ∷ []}                                               {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          assign                                          (seq {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∙ dnil ∷ []}                                               {env₂ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                               {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          (whilet {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∙ dnil ∷ []}                                                  {env₂ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                                  {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          tt                                          (seq {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∙ dnil ∷ []}                                               {env₂ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∷ []}                                               {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          assign                                          (seq {env₁ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∙ dnil ∷ dnil ∷ []}                                               {env₂ = Pd ∷ P ∷ C ∷ (dtl ∙ E) ∙ Cr ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                               {env₃ = Pd ∷ P ∷ C ∷ E ∙ (dotl ∙ Cr) ∷ St ∷ d₁ ∷ dnil ∷ dnil ∷ []}                                          assign                                          assign))                                          (whilef tt))                                          (whilef tt)))))                                          (whilef tt))))))                                          (whilef tt))))))                                          (whilef tt))))))                                          (whilef tt)))) 