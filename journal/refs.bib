
@article{boyer_mechanical_1984,
	title = {A mechanical proof of the unsolvability of the halting problem},
	volume = {31},
	url = {http://dl.acm.org/citation.cfm?id=1882},
	number = {3},
	urldate = {2016-03-09},
	journal = {Journal of the ACM (JACM)},
	author = {Boyer, Robert S. and Moore, J. Strother},
	year = {1984},
	pages = {441--458},
	file = {p441-boyer.pdf:/Users/silenceyuan/Dropbox/文献/storage/KSIR2WBF/p441-boyer.pdf:application/pdf}
}

@article{church_note_1936,
	title = {A note on the {Entscheidungsproblem}},
	volume = {1},
	url = {http://journals.cambridge.org/abstract_S0022481200038664},
	number = {01},
	urldate = {2016-03-12},
	journal = {The journal of symbolic logic},
	author = {Church, Alonzo},
	year = {1936},
	pages = {40--41},
	file = {church-a-note-on-the-entscheidungsproblem.pdf:/Users/silenceyuan/Dropbox/文献/storage/FPPCCRT4/church-a-note-on-the-entscheidungsproblem.pdf:application/pdf}
}

@article{church_unsolvable_1936,
	title = {An unsolvable problem of elementary number theory},
	volume = {58},
	url = {http://www.jstor.org/stable/2371045},
	number = {2},
	urldate = {2016-03-12},
	journal = {American journal of mathematics},
	author = {Church, Alonzo},
	year = {1936},
	pages = {345--363},
	file = {church.pdf:/Users/silenceyuan/Dropbox/文献/storage/64BTBPNW/church.pdf:application/pdf}
}

@article{wan_behavior_1975,
	title = {Behavior of soluble and immobilized acid phosphatase in hydro-organic media},
	volume = {410},
	issn = {0006-3002},
	abstract = {The hydrolysis of p-nitrophenyl phosphate by wheat germ acid phosphatase (orthophosphoric monoester phosphohydrolase, EC 3.1.3.2) has been investigated in mixtures of aqueous buffers with acetone, dioxane and acetonitrile. The enzyme was either in free solution or immobilized on a pellicular support which consisted of a porous carbonaceous layer on solid glass beads. The highest enzyme activity was obtained in acetone and acetonitrile mixed with citrate buffer over a wide range of organic solvent concentration. In 50\% (v/v) acetone both V and Km of the immobilized enzyme were about half of the values in the neat aqueous buffer, but the Ki for inorganic phosphate was unchanged. In 50\% (v/v) mixtures of various solvents and citrate buffers of different pH, the enzymic activity was found to depend on the pH of the aqueous buffer component rather than the pH of the hydro-organic mixture as measured with the glass-calomel electrode. The relatively high rates of p-nitrophenol liberation in the presence of glucose even at high organic solvent concentrations suggest that transphosphorylation is facilitated at low water activity.},
	language = {eng},
	number = {1},
	journal = {Biochimica Et Biophysica Acta},
	author = {Wan, H. and Horvath, C.},
	month = nov,
	year = {1975},
	pmid = {68},
	keywords = {Acid Phosphatase, Hydrogen-Ion Concentration, Kinetics, Protein Binding, Seeds, Solubility, Triticum},
	pages = {135--144}
}

@misc{_computability_2015,
	title = {Computability},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Computability&oldid=659987704},
	abstract = {You might be looking for Computable function, Computability theory, Computation, or Theory of computation.
Computability is the ability to solve a problem in an effective manner. It is a key topic of the field of computability theory within mathematical logic and the theory of computation within computer science. The computability of a problem is closely linked to the existence of an algorithm to solve the problem.
The most widely-studied models of computability are the Turing-computable and μ-recursive functions, and the lambda calculus, all of which have computationally equivalent power. Other forms of computability are studied as well: computability notions weaker than Turing machines are studied in automata theory, while computability notions stronger than Turing machines are studied in the field of hypercomputation.},
	language = {en},
	urldate = {2015-10-12},
	journal = {Wikipedia, the free encyclopedia},
	month = apr,
	year = {2015},
	note = {Page Version ID: 659987704},
	file = {Snapshot:/Users/silenceyuan/Dropbox/文献/storage/RGZ2U8XI/index.html:text/html}
}

@book{jones_computability_1997,
	address = {Cambridge, Mass},
	series = {Foundations of computing},
	title = {Computability and complexity: from a programming perspective},
	isbn = {978-0-262-10064-9},
	shorttitle = {Computability and complexity},
	publisher = {MIT Press},
	author = {Jones, Neil D.},
	year = {1997},
	keywords = {Computational complexity, Computer programming}
}

@book{moggi_computational_1988,
	title = {Computational lambda-calculus and monads},
	url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.80.3104&rep=rep1&type=pdf},
	urldate = {2015-10-12},
	publisher = {Citeseer},
	author = {Moggi, Eugenio},
	year = {1988},
	file = {10.1.1.80.3104.pdf:/Users/silenceyuan/Dropbox/文献/storage/WU7DMR78/10.1.1.80.3104.pdf:application/pdf}
}

@article{turing_computing_1950,
	title = {Computing machinery and intelligence},
	url = {http://www.jstor.org/stable/2251299},
	urldate = {2015-11-28},
	journal = {Mind},
	author = {Turing, Alan M.},
	year = {1950},
	pages = {433--460},
	file = {turing.pdf:/Users/silenceyuan/Dropbox/Y4/IDS/book/turing.pdf:application/pdf}
}

@incollection{norell_dependently_2009,
	title = {Dependently typed programming in {Agda}},
	url = {http://link.springer.com/chapter/10.1007/978-3-642-04652-0_5},
	urldate = {2015-10-12},
	booktitle = {Advanced {Functional} {Programming}},
	publisher = {Springer},
	author = {Norell, Ulf},
	year = {2009},
	pages = {230--266},
	file = {tutorial.pdf:/Users/silenceyuan/Dropbox/文献/storage/CET49IKZ/tutorial.pdf:application/pdf}
}

@article{mclennan_euglena_1975,
	title = {Euglena gracilis deoxyribonucleic acid polymerases: subcellular locations and variations during the cell cycle},
	volume = {3},
	issn = {0300-5127},
	shorttitle = {Euglena gracilis deoxyribonucleic acid polymerases},
	language = {eng},
	number = {5},
	journal = {Biochemical Society Transactions},
	author = {McLennan, A. G. and Keir, H. M.},
	year = {1975},
	pmid = {262},
	keywords = {Animals, Cell Division, Chloroplasts, DNA Nucleotidyltransferases, Enzyme Activation, Euglena gracilis, Hydrogen-Ion Concentration, Isoenzymes, Magnesium, Subcellular Fractions, Time Factors},
	pages = {652}
}

@article{makar_formate_1975,
	title = {Formate assay in body fluids: application in methanol poisoning},
	volume = {13},
	issn = {0006-2944},
	shorttitle = {Formate assay in body fluids},
	language = {eng},
	number = {2},
	journal = {Biochemical Medicine},
	author = {Makar, A. B. and McMartin, K. E. and Palese, M. and Tephly, T. R.},
	month = jun,
	year = {1975},
	pmid = {1},
	keywords = {Aldehyde Oxidoreductases, Animals, Body Fluids, Carbon Dioxide, Formates, Haplorhini, Humans, Hydrogen-Ion Concentration, Kinetics, Methanol, Methods, Pseudomonas},
	pages = {117--126}
}

@misc{_halting_2015,
	title = {Halting problem},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Halting_problem&oldid=685183096},
	abstract = {In computability theory, the halting problem is the problem of determining, from a description of an arbitrary computer program and an input, whether the program will finish running or continue to run forever.
Alan Turing proved in 1936 that a general algorithm to solve the halting problem for all possible program-input pairs cannot exist. A key part of the proof was a mathematical definition of a computer and program, which became known as a Turing machine; the halting problem is undecidable over Turing machines. It is one of the first examples of a decision problem.
Jack Copeland (2004) attributes the term halting problem to Martin Davis.},
	language = {en},
	urldate = {2015-10-12},
	journal = {Wikipedia, the free encyclopedia},
	month = oct,
	year = {2015},
	note = {Page Version ID: 685183096},
	file = {Snapshot:/Users/silenceyuan/Dropbox/文献/storage/58RHQZ5J/index.html:text/html}
}

@book{van_oosten_homotopy_2014,
	title = {Homotopy {Type} {Theory}: {Univalent} {Foundations} of {Mathematics}, http://homotopytypetheory. org/book, {Institute} for {Advanced} {Study}},
	shorttitle = {Homotopy {Type} {Theory}},
	url = {http://www.jstor.org/stable/43150546},
	urldate = {2016-03-12},
	publisher = {JSTOR},
	author = {van Oosten, Jaap},
	year = {2014},
	file = {43150546.pdf:/Users/silenceyuan/Dropbox/文献/storage/JZBGI9AP/43150546.pdf:application/pdf}
}

@article{jiraskova_kleene_2013,
	title = {Kleene {Closure} and {State} {Complexity}.},
	volume = {2013},
	url = {http://ceur-ws.org/Vol-1003/94.pdf},
	urldate = {2016-03-12},
	journal = {ITAT},
	author = {Jirásková, Galina and Palmovskỳ, Matús},
	year = {2013},
	pages = {94--100},
	file = {94.pdf:/Users/silenceyuan/Dropbox/文献/storage/R2GI3ZC9/94.pdf:application/pdf}
}

@misc{_markov_2015,
	title = {Markov algorithm},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Markov_algorithm&oldid=680734144},
	abstract = {In theoretical computer science, a Markov algorithm is a string rewriting system that uses grammar-like rules to operate on strings of symbols. Markov algorithms have been shown to be Turing-complete, which means that they are suitable as a general model of computation and can represent any mathematical expression from its simple notation. Markov algorithms are named after the Soviet mathematician Andrey Markov, Jr.
Refal is a programming language based on Markov algorithms.},
	language = {en},
	urldate = {2015-12-08},
	journal = {Wikipedia, the free encyclopedia},
	month = sep,
	year = {2015},
	note = {Page Version ID: 680734144},
	file = {Snapshot:/Users/silenceyuan/Dropbox/文献/storage/ZEP66FGA/index.html:text/html}
}

@article{turing_computable_1936,
	title = {On computable numbers, with an application to the {Entscheidungsproblem}},
	volume = {58},
	url = {https://people.cs.umass.edu/~immerman/cs601/TuringPaper1936.pdf},
	number = {345-363},
	urldate = {2016-03-11},
	journal = {J. of Math},
	author = {Turing, Alan Mathison},
	year = {1936},
	pages = {5},
	file = {Turing_Paper_1936.pdf:/Users/silenceyuan/Dropbox/文献/storage/UK5IXZ92/Turing_Paper_1936.pdf:application/pdf}
}

@book{yasuhara_recursive_1971,
	address = {New York},
	series = {Computer science and applied mathematics},
	title = {Recursive function theory and logic},
	isbn = {978-0-12-768950-0},
	publisher = {Academic Press},
	author = {Yasuhara, Ann},
	year = {1971},
	keywords = {Logic, Symbolic and mathematical, Recursive functions}
}

@misc{_recursive_2015,
	title = {Recursive language},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Recursive_language&oldid=692264552},
	abstract = {In mathematics, logic and computer science, a formal language (a set of finite sequences of symbols taken from a fixed alphabet) is called recursive if it is a recursive subset of the set of all possible finite sequences over the alphabet of the language. Equivalently, a formal language is recursive if there exists a total Turing machine (a Turing machine that halts for every given input) that, when given a finite sequence of symbols as input, accepts it if belongs to the language and rejects it otherwise. Recursive languages are also called decidable.
The concept of decidability may be extended to other models of computation. For example one may speak of languages decidable on a non-deterministic Turing machine. Therefore, whenever an ambiguity is possible, the synonym for "recursive language" used is Turing-decidable language, rather than simply decidable.
The class of all recursive languages is often called R, although this name is also used for the class RP.
This type of language was not defined in the Chomsky hierarchy of (Chomsky 1959). All recursive languages are also recursively enumerable. All regular, context-free and context-sensitive languages are recursive.},
	language = {en},
	urldate = {2016-03-14},
	journal = {Wikipedia, the free encyclopedia},
	month = nov,
	year = {2015},
	note = {Page Version ID: 692264552},
	file = {Snapshot:/Users/silenceyuan/Dropbox/文献/storage/6RTDI22K/index.html:text/html}
}

@misc{_recursively_2015,
	title = {Recursively enumerable language},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Recursively_enumerable_language&oldid=678743023},
	abstract = {In mathematics, logic and computer science, a formal language is called recursively enumerable (also recognizable, partially decidable, semidecidable, Turing-acceptable or Turing-recognizable) if it is a recursively enumerable subset in the set of all possible words over the alphabet of the language, i.e., if there exists a Turing machine which will enumerate all valid strings of the language.
Recursively enumerable languages are known as type-0 languages in the Chomsky hierarchy of formal languages. All regular, context-free, context-sensitive and recursive languages are recursively enumerable.
The class of all recursively enumerable languages is called RE.},
	language = {en},
	urldate = {2016-03-14},
	journal = {Wikipedia, the free encyclopedia},
	month = aug,
	year = {2015},
	note = {Page Version ID: 678743023},
	file = {Snapshot:/Users/silenceyuan/Dropbox/文献/storage/XF4R29CF/index.html:text/html}
}

@article{copeland_church-turing_2002,
	title = {The church-turing thesis},
	journal = {Stanford encyclopedia of philosophy},
	author = {Copeland, B. Jack},
	year = {2002},
	file = {Church-Turing.pdf:/Users/silenceyuan/Dropbox/文献/storage/6N4WC5WN/Church-Turing.pdf:application/pdf}
}

@book{rogers_theory_1987,
	address = {Cambridge, Mass},
	edition = {1st MIT Press pbk. ed},
	title = {Theory of recursive functions and effective computability},
	isbn = {978-0-262-68052-3},
	publisher = {MIT Press},
	author = {Rogers, H.},
	year = {1987},
	keywords = {Computable functions, Recursive functions}
}

@inproceedings{cook_time-bounded_1972,
	title = {Time-bounded random access machines},
	url = {http://dl.acm.org/citation.cfm?id=804898},
	urldate = {2015-10-12},
	booktitle = {Proceedings of the fourth annual {ACM} symposium on {Theory} of computing},
	publisher = {ACM},
	author = {Cook, Stephen A. and Reckhow, Robert A.},
	year = {1972},
	pages = {73--80},
	file = {p73-cook.pdf:/Users/silenceyuan/Dropbox/文献/storage/9J4B4J7C/p73-cook.pdf:application/pdf}
}

@misc{_universal_2016,
	title = {Universal {Turing} machine},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Universal_Turing_machine&oldid=709735601},
	abstract = {In computer science, a universal Turing machine (UTM) is a Turing machine that can simulate an arbitrary Turing machine on arbitrary input. The universal machine essentially achieves this by reading both the description of the machine to be simulated as well as the input thereof from its own tape. Alan Turing introduced this machine in 1936–1937. This model is considered by some (for example, Martin Davis (2000)) to be the origin of the stored program computer—used by John von Neumann (1946) for the "Electronic Computing Instrument" that now bears von Neumann's name: the von Neumann architecture. It is also known as universal computing machine, universal machine (UM), machine U, U.
In terms of computational complexity, a multi-tape universal Turing machine need only be slower by logarithmic factor compared to the machines it simulates.},
	language = {en},
	urldate = {2016-03-14},
	journal = {Wikipedia, the free encyclopedia},
	month = mar,
	year = {2016},
	note = {Page Version ID: 709735601},
	file = {Snapshot:/Users/silenceyuan/Dropbox/文献/storage/J9UAX7GM/index.html:text/html}
}